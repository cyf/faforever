name: Test Windows Tools

on:
  workflow_dispatch:

# Declare default permissions as readonly.
permissions: read-all

jobs:
  signtool:
    name: Create signtool
    runs-on: windows-latest
    steps:
      - name: Check SignTool
        run: |
          cd 'C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool'
          ls -R

#  msix:
#    name: Create msix
#    runs-on: windows-latest
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Install certificates
#        run: |
#          echo $env:RUNNER_TEMP
#          $certificate_path = "$env:RUNNER_TEMP\faforever.pfx"
#          # https://stackoverflow.com/questions/15414678/how-to-decode-a-base64-string
#          # https://stackoverflow.com/questions/66239147/pfx-encoded-and-back-to-pfx-in-powershell
#          $bytes = echo $env:WINDOWS_CERTIFICATE | %{[Convert]::FromBase64String($_)}
#          [IO.File]::WriteAllBytes("$certificate_path", $bytes)
#          (get-content windows\packaging\msix\make_config.yaml) -replace 'PUBLISHER_NAME_PLACEHOLDER', $env:WINDOWS_PUBLISHER_NAME -replace 'IDENTITY_NAME_PLACEHOLDER', $env:WINDOWS_IDENTITY_NAME -replace 'CERTIFICATE_PATH_PLACEHOLDER', $certificate_path -replace 'CERTIFICATE_PASSWORD_PLACEHOLDER', $env:WINDOWS_CERTIFICATE_PASSWORD -replace 'PUBLISHER_PLACEHOLDER', $env:WINDOWS_PUBLISHER | Out-File -encoding utf8 windows\packaging\msix\make_config.yaml
#        env:
#          WINDOWS_PUBLISHER_NAME: ${{ secrets.WINDOWS_PUBLISHER_NAME }}
#          WINDOWS_IDENTITY_NAME: ${{ secrets.WINDOWS_IDENTITY_NAME }}
#          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
#          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
#          WINDOWS_PUBLISHER: ${{ secrets.WINDOWS_PUBLISHER }}
#
#      - uses: actions/upload-artifact@v4
#        with:
#          name: msix-artifact
#          path: |
#            windows\packaging\msix\make_config.yaml

  yq:
    name: Update config
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install yq
        shell: pwsh
        run: |
          choco install yq
          yq --version

      - name: Update config
        shell: pwsh
        run: |
          $SETUP_ICON_FILE = "$pwd\windows\runner\resources\app_icon.ico"
          echo $SETUP_ICON_FILE
          
          $yamlFile = ".\windows\packaging\exe\make_config.yaml"
          $yamlContent = Get-Content -Raw -Path $yamlFile
          
          # 获取环境变量的值
          $appId = (Get-Item -Path Env:WINDOWS_APP_ID).Value
          $publisherName = (Get-Item -Path Env:WINDOWS_PUBLISHER_NAME).Value
          
          # 使用 yq 更新多个字段
          $updatedYamlContent = echo $yamlContent | yq e ".app_id = `"$appId`" | .publisher_name = `"$publisherName`" | .setup_icon_file = `"$SETUP_ICON_FILE`"" -
          
          # 将更新后的内容写回文件
          Set-Content -Path $yamlFile -Value $updatedYamlContent
        env:
          WINDOWS_APP_ID: ${{ secrets.WINDOWS_APP_ID }}
          WINDOWS_PUBLISHER_NAME: ${{ secrets.WINDOWS_PUBLISHER_NAME }}

      - uses: actions/upload-artifact@v4
        with:
          name: yq-artifact
          path: |
            windows\packaging\exe\make_config.yaml
